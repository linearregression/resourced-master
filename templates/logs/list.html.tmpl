{{define "second-navbar"}}
<nav class="navbar navbar-default">
    <div class="container">
        <div class="form-group form-group-search-and-save">
            <form class="navbar-form navbar-left search-form" role="search" action="/logs">
                <div class="input-group">
                    <input id="search-input" name="q" type="text" class="form-control" placeholder="Syntax: logline search 'keyword1 & keyword2 | keyword3'. Press enter to search">
                    <input type="hidden" name="from" value="{{ $.From }}">
                    <input type="hidden" name="to" value="{{ $.To }}">
                </div>
            </form>

            <form class="navbar-form navbar-left saved-queries-form" action="/saved-queries" method="post">
                <input type="hidden" name="gorilla.csrf.Token" value="{{ $.CSRFToken }}">
                <input id="saved-queries-input" name="SavedQuery" type="hidden">
                <input name="Type" type="hidden" value="logs">

                <div class="input-group">
                    <span class="input-group-btn">
                        <button type="submit" class="btn btn-primary">Save Query</button>
                    </span>
                </div>
            </form>
        </div>
    </div>
</nav>

<script>
$(window).load(function() {
    var key = "q";
    var value = "";
    var sPageURL = window.location.search.substring(1);
    var sURLVariables = sPageURL.split('&');

    for (var i = 0; i < sURLVariables.length; i++) {
        var sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0] == key) {
            value = sParameterName[1];
        }
    }

    value = value.replace(/\+/g, " ");

    if(value != "") {
        $('[name="q"]').val(decodeURIComponent(value));
    }

    // On load, cp search input to saved-queries input.
    $('#saved-queries-input').val($('#search-input').val());
});

// This catches keyup, onchange, and paste events.
// cp search input to saved-queries input
$('#search-input').bind("input propertychange", function(e) {
    $('#saved-queries-input').val($(this).val());
});
</script>
{{ end }}

{{define "content"}}
<!-- Saved Queries -->
<div class="container saved-queries">
    <div class="row">
        <div class="col-lg-12">
            <div class="page-header">
                <div class="pull-right">
                    <small class="updated-queries-toggle">Show All</small>
                    <input type="checkbox" class="toggler toggler-header pull-right" data-size="mini">
                </div>

                <h2>Saved Queries</h2>
            </div>
        </div>
    </div>

    {{ range $i, $savedQuery := .SavedQueries }}
    <div class="row saved-queries" style="{{ if lt $i 5 }}display: block{{ else }}display: none{{ end }}">
        <div class="col-xs-12 col-lg-12">
            <div>
                <div class="pull-right">
                    <a href="?q={{ $savedQuery.Query }}" type="submit" class="btn btn-default">
                        <span class="glyphicon glyphicon-search" aria-hidden="true"></span>
                    </a>

                    <a href="//{{ $.AccessToken.Token }}:@{{ $.Addr }}/api/logs?q={{ $savedQuery.Query }}" type="submit" class="btn btn-success">
                       JSON
                    </a>

                    <form action="/saved-queries/{{ $savedQuery.ID }}" method="post">
                        <input type="hidden" name="gorilla.csrf.Token" value="{{ $.CSRFToken }}">
                        <input type="hidden" name="_method" value="delete">
                        <button type="submit" class="btn btn-danger">Delete</button>
                    </form>
                </div>

                <h3>{{ $savedQuery.Query }}</h3>
            </div>
        </div>
    </div>
    {{ end }}
</div>

<!-- Logs -->
<div class="container logs">
    <div class="row">
        <div class="col-lg-12">
            <div class="page-header" style="padding-bottom: 0">
                <div class="row pull-right pagination">
                    <div class="input-group">
                        <input class="form-control daterange" type="text" />
                        <span class ="input-group-btn">
                            <a type="button" class="btn btn-primary btn-pagination-prev" href=""><span aria-hidden="true" class="glyphicon glyphicon-arrow-left"></span></a>
                            <a type="button" class="btn btn-primary btn-pagination-next" href=""><span aria-hidden="true" class="glyphicon glyphicon-arrow-right"></span></a>
                        </span>
                    </div>
                </div>

                <ul class="nav nav-tabs">
                    <li role="presentation" class="tabs logs-tab"><a href="/logs">Logs</a></li>
                    <li role="presentation" class="tabs executor-logs-tab"><a href="/logs/executors">Executor Logs</a></li>
                </ul>
            </div>
        </div>
    </div>

    <div class="from-to-marker">
        <small class="time-unix-to-local">{{ $.From }}</small> - <small class="time-unix-to-local">{{ $.To }}</small>
    </div>

    <div class="row">
        <div class="col-lg-12">
            <ul class="logs-list"></ul>
        </div>
    </div>

    <div class="row" style="padding-top: 8px; padding-bottom: 8px; margin-bottom: 16px; border-top: 1px solid #4e5d6c">
        <div class="col-lg-4 col-md-6 col-sm-6 col-xs-6">
            <input id="search-input" name="q" type="text" class="form-control" placeholder="Press enter to search" onkeyup="filter(this)">
        </div>

        <div class="col-lg-8 col-md-6 col-sm-6 col-xs-6">
            <div class="row pull-right pagination">
                <div class="input-group">
                    <input class="form-control daterange" type="text" />
                    <span class ="input-group-btn">
                        <a type="button" class="btn btn-primary btn-pagination-prev" href=""><span aria-hidden="true" class="glyphicon glyphicon-arrow-left"></span></a>
                        <a type="button" class="btn btn-primary btn-pagination-next" href=""><span aria-hidden="true" class="glyphicon glyphicon-arrow-right"></span></a>
                    </span>
                </div>
            </div>
        </div>
    </div>

</div>

<script>
ResourcedMaster.globals.AccessToken = '{{ $.AccessToken.Token }}';
ResourcedMaster.logs.itemsPerPage = 50;

function showLogs(olderOrNewer, logsJSON, ulSelector, itemsPerPage) {
    var list = $(ulSelector);

    var storedOlderOrNewer = list.data('older-or-newer');

    // Newer means we are paginating smaller array index number.
    if(olderOrNewer == 'newer') {
        if (itemsPerPage >= 0) {
            itemsPerPage = itemsPerPage * -1;
        }
    }

    var index = list.data('index') % logsJSON.length || 0;

    var newIndex = index + itemsPerPage;
    if(newIndex < 0) {
        newIndex = 0;
    }

    // If user is switching back and forth between older and newer arrows,
    // paginate one step further.
    if(storedOlderOrNewer != olderOrNewer) {
        index = index + itemsPerPage;
        newIndex = index + itemsPerPage;
    }

    list.data('index', newIndex);
    list.data('older-or-newer', olderOrNewer);

    list.html($.map(logsJSON.slice(Math.min(index, newIndex), Math.max(index, newIndex)), function(val) {
        var tags = '';

        for (var prop in val.Tags) {
            // skip loop if the property is from prototype
            if(!val.Tags.hasOwnProperty(prop)) continue;

            var tag = '<a href="#">' + prop + ": " + val.Tags[prop] + '</a>';
            tags = tags + tag;
        }

        return '<li>' +
            '<div class="logline">' + val.Logline + '</div>' +
            '<div class="hostname">' + val.Hostname + '</div>' +
            '<div class="tags">' + tags + '</div>' +
        '</li>';
    }).join(''));
}

$(document).ready(function() {
    if(window.location.pathname.indexOf('/executors') != -1) {
        $('.tabs').removeClass('active');
        $('.executor-logs-tab').addClass('active');
    } else {
        $('.tabs').removeClass('active');
        $('.logs-tab').addClass('active');
    }

    // ----------------------------------------
    // Saved Queries

    $('.toggler').bootstrapSwitch();

    // Hide Saved Queries container if there are no save queries.
    if($('.row.saved-queries').length == 0) {
        $('.container.saved-queries').hide();
    }

    // Show all saved-queries if toggler is set to on.
    $('.container.saved-queries .toggler-header').each(function() {
        var elem = $(this);

        ResourcedMaster.UIStore.get('.container.saved-queries .toggler-header').then(function(doc) {
            if (doc && doc.state) {
                elem.bootstrapSwitch('state', true, true);
                elem.closest('.container.saved-queries').find('.row.saved-queries').show();
            }
        });
    });

    // -----------------------------------------------------
    // Set from and to unix timestamp from server-side.
    //
    var to = {{ .To }};
    var from = {{ .From }};

    // -----------------------------------------------------
    // Initialize daterange picker
    //
    $('input.daterange').each(function(index) {
        var drpElem = $(this);

        var settings = jQuery.extend(true, {}, ResourcedMaster.daterange.defaultSettings);
        settings.startDate = from;
        settings.stopDate = to;

        drpElem.daterangepicker(settings);
    });

    // -----------------------------------------------------
    // Fetch logs data on-load
    //
    ResourcedMaster.logs.get(ResourcedMaster.globals.AccessToken, {
        from: from,
        to: to,
        query: ResourcedMaster.url.getParams('q'),
        successCallback: function(logsJSON) {
            ResourcedMaster.logs.current = logsJSON;
            showLogs('older', ResourcedMaster.logs.current, '.logs-list', ResourcedMaster.logs.itemsPerPage);
        }
    });
});

$('input.daterange').on('apply.daterangepicker', function(e, picker) {
    var newPath = window.location.pathname + '?from=' + picker.startDate.utc().unix() + '&to=' + picker.endDate.utc().unix();
    var q = ResourcedMaster.url.getParams('q');

    if(q) {
        newPath = newPath + '&q=' + q;
    }

    window.location = newPath;
});

$('.container.saved-queries .toggler-header').on('switchChange.bootstrapSwitch', function(event, state) {
    if(state) {
        $(this).closest('.container.saved-queries').find('.row.saved-queries').show();
    } else {
        $(this).closest('.container.saved-queries').find('.row.saved-queries:gt(4)').hide();
    }

    var uiStoreID = '.container.saved-queries .toggler-header';
    var uiStoreData = {
        _id: uiStoreID,
        state: state
    };

    ResourcedMaster.UIStore.get(uiStoreID).then(function(doc) {
        if(doc) { uiStoreData._rev = doc._rev; }
        return ResourcedMaster.UIStore.put(uiStoreData);
    }).catch(function (err) {
        if(err.name == 'not_found') {
            return ResourcedMaster.UIStore.put(uiStoreData);
        }
    });
});

$('.btn-pagination-prev').click(function(e) {
    e.preventDefault();
    showLogs('older', ResourcedMaster.logs.current, '.logs-list', ResourcedMaster.logs.itemsPerPage);
    $('html, body').animate({ scrollTop: 0 }, 'slow'); // Scroll to top
});

$('.btn-pagination-next').click(function(e) {
    e.preventDefault();
    showLogs('newer', ResourcedMaster.logs.current, '.logs-list', ResourcedMaster.logs.itemsPerPage);
    $('html, body').animate({ scrollTop: 0 }, 'slow'); // Scroll to top
});
</script>
{{end}}