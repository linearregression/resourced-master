{{define "second-navbar"}}
<!-- Graphs Nav -->
<nav class="navbar navbar-default">
    <div class="container graphs">
        <div class="row">
            <div class="col-xs-10 col-sm-10 col-md-10 col-lg-10" style="padding-right: 0">
                <select class="form-control graphs-select" data-width="100%" data-size="10">
                {{ range $graph := .Graphs }}
                    <option value="{{ $graph.ID }}" {{if eq $graph.ID $.CurrentGraph.ID }}selected="selected"{{ end }}>{{ $graph.Name }}</option>
                {{ end }}
                </select>
            </div>

            <div class="col-xs-2 col-sm-2 col-md-2 col-lg-2" style="padding-left: 0">
                <button class="btn btn-primary" data-toggle="modal" data-target="#add-chart-modal" data-graph-id="{{ $.CurrentGraph.ID }}">
                    Add Charts
                </button>
            </div>
        </div>
    </div>
</nav>
{{ end }}

{{define "content"}}
<div class="container-fluid graphs-metrics-packery">
    <div class="item"></div>
    <div class="item"></div>
    <div class="item"></div>
    <div class="item"></div>
    <div class="item"></div>
    <div class="item"></div>
    <div class="item"></div>
    <div class="item"></div>
    <div class="item"></div>
    <div class="item"></div>
</div>

<div class="container-fluid graphs-metrics-container">
    {{ range $metricsContainer := .CurrentGraph.MetricsFromJSONGroupByThree }}
    <div class="row">
        {{ range $metric := $metricsContainer }}
        <div class="col-md-4">
            <div class="panel panel-default panel-chart" data-id="{{ $metric.ID }}" data-key="{{ $metric.Key }}">
                <div class="panel-heading" data-id="{{ $metric.ID }}" data-key="{{ $metric.Key }}">
                    <input class="form-control daterange" type="text" data-id="{{ $metric.ID }}" data-key="{{ $metric.Key }}" />
                </div>

                <div class="panel-body"></div>
            </div>
        </div>
        {{ end }}
    </div>
    {{ end }}
</div>

<!-- Add a Chart Modal -->
<div class="modal fade" id="add-chart-modal" tabindex="-1" role="dialog" aria-labelledby="graph-label" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title">Add Charts</h4>
            </div>

            <form action="/graphs/{{ $.CurrentGraph.ID }}" method="post">
                <input type="hidden" name="gorilla.csrf.Token" value="{{ $.CSRFToken }}">
                <input type="hidden" name="_method" value="put">

                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <select class="form-control chart-keys" name="Metrics" multiple size="15">
                            {{ range $metric := .Metrics }}
                                <option data-graph-id="{{ $.CurrentGraph.ID }}" value="{{ $metric.ID }}-{{ $metric.Key }}" data-key="{{ $metric.Key }}">{{ $metric.Key }}</option>
                            {{ end }}
                            </select>
                        </div>

                         <div class="col-md-6" style="padding-left: 0">
                            <div class="add-chart-modal-container"></div>
                         </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
// Refresh page every 5 minutes
setInterval(function() {
    window.location.reload();
}, 5*60000);

ResourcedMaster.globals.ChartKeys = [];
ResourcedMaster.globals.AccessToken = '{{ $.AccessToken.Token }}';
ResourcedMaster.globals.CurrentGraph = {
    ID: {{ $.CurrentGraph.ID }},
    ClusterID: {{ $.CurrentGraph.ClusterID }},
    Name: '{{ $.CurrentGraph.Name }}',
    Description: '{{ $.CurrentGraph.Description }}',
    Range: '{{ $.CurrentGraph.Range }}'
};

function renderChartPreview() {
    var metrics = ResourcedMaster.globals.ChartKeys;
    var lastMetricIDAndKey = metrics[metrics.length - 1].split(/\-(.+)?/);
    var lastMetricID = lastMetricIDAndKey[0];
    var lastMetricKey = lastMetricIDAndKey[1];
    var containerDOM = $('#add-chart-modal').find('.add-chart-modal-container');

    ResourcedMaster.metrics.renderOneChart(
        ResourcedMaster.globals.AccessToken,
        lastMetricID,
        ResourcedMaster.globals.TSEventLines,
        ResourcedMaster.globals.TSEventLineColors,
        ResourcedMaster.globals.TSEventBands,
        ResourcedMaster.globals.TSEventBandColors,
        ResourcedMaster.globals.TSEventBandTextColors,
        {
            'from': moment().subtract(15, 'minutes'),
            'to': moment(),
            'containerDOM': containerDOM,
            'height': ResourcedMaster.highcharts.defaultHeight + 6,
            'title': lastMetricKey
        }
    );
}

function renderChartRange(daterangepicker, from, to) {
    var elem = daterangepicker.closest('.panel-heading');
    var metricID = elem.data('id');
    var metricKey = elem.data('key');
    var containerDOM = elem.siblings('.panel-body');

    var renderOptions = {
        'from': from,
        'to': to,
        'containerDOM': containerDOM,
        'title': metricKey
    };

    if((to - from) >= 21600) {
        renderOptions.shortAggrInterval = '15min';
    }

    ResourcedMaster.metrics.renderOneChart(
        ResourcedMaster.globals.AccessToken,
        metricID,
        ResourcedMaster.globals.TSEventLines,
        ResourcedMaster.globals.TSEventLineColors,
        ResourcedMaster.globals.TSEventBands,
        ResourcedMaster.globals.TSEventBandColors,
        ResourcedMaster.globals.TSEventBandTextColors,
        renderOptions
    );
}

function renderAllChart() {
    $('.graphs-metrics-container .panel-heading').each(function() {
        var drpElem = $(this).find('.daterange');
        var drp = drpElem.data('daterangepicker');
        var from = drp.startDate.unix();
        var to = drp.endDate.unix();

        renderChartRange(drpElem, from, to);
    });
}

$(window).resize(function() {
    $('.graphs-metrics-container .panel-body').each(function() {
        $(this).highcharts().setSize(
            $(this).width(), ResourcedMaster.highcharts.defaultHeight, doAnimation = false
        );
    });
});

$(document).ready(function() {
    // Packery Stuff
    var $container = $('.graphs-metrics-packery');
    $container.packery({
        itemSelector: '.graphs-metrics-packery .item',
        percentPosition: true,
        gutter: 5
    });
    // get item elements, jQuery-ify them
    var $itemElems = $( $container.packery('getItemElements') );
    // make item elements draggable
    $itemElems.draggable().resizable();
    // bind Draggable events to Packery
    $container.packery( 'bindUIDraggableEvents', $itemElems );

    // handle resizing
    var resizeTimeout;
    $itemElems.on( 'resize', function( event, ui ) {
        // debounce
        if ( resizeTimeout ) {
          clearTimeout( resizeTimeout );
        }

        resizeTimeout = setTimeout( function() {
            $container.packery( 'fit', ui.element[0] );
        }, 100 );
    });

    // -------------------------------------------

    var currentGraphRangeSplit = ResourcedMaster.globals.CurrentGraph.Range.split(" ");
    var currentGraphRangeCount = parseInt(currentGraphRangeSplit[0], 10);
    var currentGraphRangeUnit = currentGraphRangeSplit[1];

    ResourcedMaster.metrics.getEventsLastXRange(currentGraphRangeCount, currentGraphRangeUnit, function(a1, a2) {
        $('input.daterange').each(function(index) {
            var drpElem = $(this);

            var settings = jQuery.extend(true, {}, ResourcedMaster.daterange.defaultSettings);
            settings.startDate = moment().subtract(currentGraphRangeCount, currentGraphRangeUnit);

            if(index % 3 == 0) {
                settings.opens = 'right';
            }

            drpElem.daterangepicker(settings, function(start, end, label) {
                var from = start.unix();
                var to = end.unix();
                renderChartRange(drpElem, from, to);
            });
        });

        renderAllChart();
    });

    // Gather the ordering of every chart panels on load.
    ResourcedMaster.globals.ChartKeys = $('.panel-chart').map(function() {
        return $(this).data('id') + '-' + $(this).data('key');
    }).get();
});

// Change the ordering of chart panels based on user clicks.
$('.chart-keys option').click(function(event) {
    var $option = $(this);
    var val = $option.val();

    if(!event.ctrlKey && !event.altKey && !event.metaKey) {
        ResourcedMaster.globals.ChartKeys = [];
    }

    if($(this).is(':selected')) {
        ResourcedMaster.globals.ChartKeys.push(val);
    } else {
        var index = ResourcedMaster.globals.ChartKeys.indexOf(val);
        if(index > -1) {
            ResourcedMaster.globals.ChartKeys.splice(index, 1);
        }
    }

    // Build form input
    var form = $('#add-chart-modal form');
    form.find('input[name="MetricsWithOrder"]').remove();

    $.each(ResourcedMaster.globals.ChartKeys, function(index, value) {
        $('<input type="hidden" name="MetricsWithOrder" value="' + value + '">').appendTo(form);
    });

    renderChartPreview();
});

$('.graphs-select').change(function() {
    window.location = '/graphs/' + $(this).val();
});

// Highlight charts that are already selected based on ResourcedMaster.globals.ChartKeys.
$('#add-chart-modal').on('shown.bs.modal', function() {
    $(this).find('.chart-keys option').each(function(index) {
        var chartKeyOption = $(this);

        $('.graphs-metrics-container .panel-heading').each(function(index) {
            if(chartKeyOption.data('key') == $(this).data('key')) {
                chartKeyOption.attr('selected', 'selected');
            }
        });
    });

    renderChartPreview();
});
</script>
{{end}}
