{{define "second-navbar"}}
<!-- Graphs Nav -->
<nav class="navbar navbar-default">
    <div class="container graphs">
        <div class="row">
            <div class="col-xs-10 col-sm-10 col-md-10 col-lg-10" style="padding-right: 0">
                <select class="form-control graphs-select" data-width="100%" data-size="10">
                {{ range $graph := .Graphs }}
                    <option value="{{ $graph.ID }}" {{if eq $graph.ID $.CurrentGraph.ID }}selected="selected"{{ end }}>{{ $graph.Name }}</option>
                {{ end }}
                </select>
            </div>

            <div class="col-xs-2 col-sm-2 col-md-2 col-lg-2" style="padding-left: 0">
                <button class="btn btn-primary" data-toggle="modal" data-target="#add-chart-modal" data-graph-id="{{ $.CurrentGraph.ID }}">
                    Add Charts
                </button>
            </div>
        </div>
    </div>
</nav>
{{ end }}

{{define "content"}}
<div class="container-fluid graphs-metrics-container">
    {{ range $metricsContainer := .CurrentGraph.MetricsFromJSONGroupByThree }}
    <div class="row">
        {{ range $metric := $metricsContainer }}
        <div class="col-md-4">
            <div class="panel panel-default panel-chart" data-id="{{ $metric.ID }}" data-key="{{ $metric.Key }}">
                <div class="panel-heading" data-id="{{ $metric.ID }}" data-key="{{ $metric.Key }}">
                    <input class="form-control chart-created-interval pull-right daterange" type="text" data-id="{{ $metric.ID }}" data-key="{{ $metric.Key }}" data-interval="15 minute" />

                    {{ $metric.Key }}
                </div>

                <div class="panel-body"></div>
            </div>
        </div>
        {{ end }}
    </div>
    {{ end }}
</div>

<!-- Add a Chart Modal -->
<div class="modal fade" id="add-chart-modal" tabindex="-1" role="dialog" aria-labelledby="graph-label" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="watchers-details-label">Add Charts</h4>
            </div>

            <form action="/graphs/{{ $.CurrentGraph.ID }}" method="post">
                <input type="hidden" name="gorilla.csrf.Token" value="{{ $.CSRFToken }}">
                <input type="hidden" name="_method" value="put">

                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <select class="form-control chart-keys" name="Metrics" multiple size="15">
                            {{ range $metric := .Metrics }}
                                <option data-graph-id="{{ $.CurrentGraph.ID }}" value="{{ $metric.ID }}-{{ $metric.Key }}" data-key="{{ $metric.Key }}">{{ $metric.Key }}</option>
                            {{ end }}
                            </select>
                        </div>

                         <div class="col-md-6" style="padding-left: 0">
                            <div class="add-chart-modal-container"></div>
                         </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
// Refresh page every 5 minutes
setInterval(function() {
    window.location.reload();
}, 5*60000);

ResourcedMaster.globals.ChartKeys = [];
ResourcedMaster.globals.AccessToken = '{{ $.AccessToken.Token }}';
ResourcedMaster.globals.TSEventLines = [];
ResourcedMaster.globals.TSEventBands = [];
ResourcedMaster.globals.TSEventLineColors = [];
ResourcedMaster.globals.TSEventBandColors = [];
ResourcedMaster.globals.TSEventBandTextColors = [];

function getEvents(doneCallback) {
    $.when(
        ResourcedMaster.metrics.getEvents(ResourcedMaster.globals.AccessToken, 'line', {
            'createdInterval': '1 day',
            'successCallback': function(result) {
                ResourcedMaster.globals.TSEventLines = result;
            }
        }),
        ResourcedMaster.metrics.getEvents(ResourcedMaster.globals.AccessToken, 'band', {
            'createdInterval': '1 day',
            'successCallback': function(result) {
                ResourcedMaster.globals.TSEventLines = result;
            }
        })
    ).done(function(a1, a2) {
        // a1 and a2 are arguments resolved for the page1 and page2 ajax requests, respectively.
        // Each argument is an array with the following structure: [ data, statusText, jqXHR ]
        ResourcedMaster.globals.TSEventLines = a1[0];
        ResourcedMaster.globals.TSEventBands = a2[0];

        ResourcedMaster.globals.TSEventLineColors = randomColor({hue: 'green', luminosity: 'light', count: ResourcedMaster.globals.TSEventLines.length});
        ResourcedMaster.globals.TSEventBandColors = randomColor({hue: 'yellow', luminosity: 'light', count: ResourcedMaster.globals.TSEventBands.length});
        ResourcedMaster.globals.TSEventBandTextColors = randomColor({hue: 'green', luminosity: 'dark', count: ResourcedMaster.globals.TSEventBands.length});

        doneCallback(a1, a2);
    });
}

function renderChartPreview() {
    var metrics = ResourcedMaster.globals.ChartKeys;
    var lastMetricIDAndKey = metrics[metrics.length -1].split(/\-(.+)?/);
    var lastMetricID = lastMetricIDAndKey[0];
    var lastMetricKey = lastMetricIDAndKey[1];
    var createdInterval = '15 minute'; // Don't fetch too many things since this is just a preview.
    var containerDOM = $('#add-chart-modal').find('.add-chart-modal-container');

    ResourcedMaster.metrics.renderOneChart(
        ResourcedMaster.globals.AccessToken,
        lastMetricID,
        ResourcedMaster.globals.TSEventLines,
        ResourcedMaster.globals.TSEventLineColors,
        ResourcedMaster.globals.TSEventBands,
        ResourcedMaster.globals.TSEventBandColors,
        ResourcedMaster.globals.TSEventBandTextColors,
        {
            'createdInterval': createdInterval,
            'containerDOM': containerDOM,
            'height': ResourcedMaster.highcharts.defaultHeight + 6,
            'title': lastMetricKey
        }
    );
}

function renderAllChart() {
    $('.graphs-metrics-container .panel-heading').each(function() {
        var metricID = $(this).data('id');
        var createdInterval = $(this).find('select').data('interval');
        var containerDOM = $(this).siblings('.panel-body');

        var renderOptions = {
            'createdInterval': createdInterval,
            'containerDOM': containerDOM
        };
        if(createdInterval.indexOf('day') > -1 || createdInterval.indexOf('6 hour') > -1 || createdInterval.indexOf('12 hour') > -1 || createdInterval.indexOf('24 hour') > -1) {
            renderOptions.shortAggrInterval = '15min';
        }

        ResourcedMaster.metrics.renderOneChart(ResourcedMaster.globals.AccessToken, metricID, renderOptions);
    });
}

function renderChartRange(daterangepicker, from, to) {
    daterangepicker.closest('.panel-heading').each(function() {
        var metricID = $(this).data('id');
        var containerDOM = $(this).siblings('.panel-body');

        var renderOptions = {
            'createdInterval': createdInterval,
            'from': from,
            'to': to,
            'containerDOM': containerDOM
        };
        if((to - from) >= 21600) {
            renderOptions.shortAggrInterval = '15min';
        }

        ResourcedMaster.metrics.renderOneChart(
            ResourcedMaster.globals.AccessToken,
            metricID,
            ResourcedMaster.globals.TSEventLines,
            ResourcedMaster.globals.TSEventLineColors,
            ResourcedMaster.globals.TSEventBands,
            ResourcedMaster.globals.TSEventBandColors,
            ResourcedMaster.globals.TSEventBandTextColors,
            renderOptions
        );
    });
}

$(window).resize(function() {
    $('.graphs-metrics-container .panel-body').each(function() {
        $(this).highcharts().setSize(
            $(this).width(), ResourcedMaster.highcharts.defaultHeight, doAnimation = false
        );
    });
});

$(document).ready(function() {
    getEvents(function(a1, a2) {
        console.log(ResourcedMaster.globals.TSEventLines);
        console.log(ResourcedMaster.globals.TSEventLineColors);

        var daterangepicker = $('input.daterange');

        $('input.daterange').each(function() {
            var daterangepicker = $(this);

            daterangepicker.daterangepicker({
                "timePicker": true,
                "timePickerSeconds": true,
                "autoApply": true,
                "ranges": {
                    '5 minutes': [moment().subtract(5, 'minutes'), moment()],
                    '10 minutes': [moment().subtract(10, 'minutes'), moment()],
                    '15 minutes': [moment().subtract(15, 'minutes'), moment()],
                    '30 minutes': [moment().subtract(30, 'minutes'), moment()],
                    '60 minutes': [moment().subtract(60, 'minutes'), moment()],
                    '2 hours': [moment().subtract(2, 'hours'), moment()],
                    '3 hours': [moment().subtract(3, 'hours'), moment()],
                    '6 hours': [moment().subtract(6, 'hours'), moment()],
                    '12 hours': [moment().subtract(12, 'hours'), moment()],
                    '24 hours': [moment().subtract(24, 'hours'), moment()],
                    '2 days': [moment().subtract(2, 'days'), moment()],
                    '3 days': [moment().subtract(3, 'days'), moment()],
                    '7 days': [moment().subtract(7, 'days'), moment()]
                },
                "defaultDate": moment(),
                "startDate": moment().subtract(15, 'minutes'),
                "endDate": moment(),
                "opens": "left"
            }, function(start, end, label) {
                renderChartRange(daterangepicker, start, end);
            });
        });
    });

    // Gather the ordering of every chart panels on load.
    ResourcedMaster.globals.ChartKeys = $('.panel-chart').map(function() {
        return $(this).data('id') + '-' + $(this).data('key');
    }).get();
});

// Change the ordering of chart panels based on user clicks.
$('.chart-keys option').click(function(event) {
    var $option = $(this);
    var val = $option.val();

    if(!event.ctrlKey && !event.altKey && !event.metaKey) {
        ResourcedMaster.globals.ChartKeys = [];
    }

    if($(this).is(':selected')) {
        ResourcedMaster.globals.ChartKeys.push(val);
    } else {
        var index = ResourcedMaster.globals.ChartKeys.indexOf(val);
        if(index > -1) {
            ResourcedMaster.globals.ChartKeys.splice(index, 1);
        }
    }

    // Build form input
    var form = $('#add-chart-modal form');
    form.find('input[name="MetricsWithOrder"]').remove();

    $.each(ResourcedMaster.globals.ChartKeys, function(index, value) {
        $('<input type="hidden" name="MetricsWithOrder" value="' + value + '">').appendTo(form);
    });

    renderChartPreview();
});

$('.graphs-select').change(function() {
    window.location = '/graphs/' + $(this).val();
});

// Highlight charts that are already selected based on ResourcedMaster.globals.ChartKeys.
$('#add-chart-modal').on('shown.bs.modal', function() {
    $(this).find('.chart-keys option').each(function(index) {
        var chartKeyOption = $(this);

        $('.graphs-metrics-container .panel-heading').each(function(index) {
            if(chartKeyOption.data('key') == $(this).data('key')) {
                chartKeyOption.attr('selected', 'selected');
            }
        });
    });

    renderChartPreview();
});
</script>
{{end}}
