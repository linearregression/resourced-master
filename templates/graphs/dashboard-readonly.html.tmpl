{{define "second-navbar"}}
<!-- Graphs Nav -->
<nav class="navbar navbar-default">
    <div class="container graphs">
        <div class="row">
            <select class="form-control graphs-select" data-width="100%" data-size="10">
            {{ range $graph := .Graphs }}
                <option value="{{ $graph.ID }}" {{if eq $graph.ID $.CurrentGraph.ID }}selected="selected"{{ end }}>{{ $graph.Name }}</option>
            {{ end }}
            </select>
        </div>
    </div>
</nav>
{{ end }}

{{define "content"}}
<div class="container-fluid graphs-metrics-brick-layout-container">
    <div class="graphs-metrics-brick-layout" data-graph-id="{{ .CurrentGraph.ID }}">
        <div class="sizer"></div>
        <div class="gutter-sizer"></div>

        {{ range $metric := .CurrentGraph.MetricsFromJSON }}
        <div class="item panel panel-default panel-chart" data-cluster-id="{{ $metric.ClusterID }}" data-id="{{ $metric.ID }}" data-key="{{ $metric.Key }}">
            <div class="panel-heading" data-id="{{ $metric.ID }}" data-key="{{ $metric.Key }}">
                <button class="btn btn-success pull-right" style="width: 10%; padding: 8px" data-toggle="modal" data-target="#graph-lg-modal"
                    data-metric-id="{{ $metric.ID }}",
                    data-metric-key="{{ $metric.Key }}">
                    <span class="glyphicon glyphicon-resize-full" aria-hidden="true"></span>
                </button>

                <input class="form-control daterange" style="width: 90%" type="text" data-id="{{ $metric.ID }}" data-key="{{ $metric.Key }}" />

                <select class="form-control aggregate-selector" style="display: none">
                    <option value="avg">Avg</option>
                    <option value="max">Max</option>
                    <option value="min">Min</option>
                    <option value="sum">Sum</option>
                </select>
            </div>

            <div class="panel-body"></div>
        </div>
        {{ end }}
    </div>
</div>

<!-- Enlarged Chart Modal -->
<div class="modal fade" id="graph-lg-modal" tabindex="-1" role="dialog" aria-labelledby="graph-lg-label" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <input class="form-control daterange" type="text" />
            </div>

            <div class="modal-body">
                <div class="graph-lg-modal-container"></div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>
// Refresh page every 5 minutes
setInterval(function() {
    window.location.reload();
}, 5*60000);

ResourcedMaster.globals.ChartsRendered = [];
ResourcedMaster.globals.Charts = [];
ResourcedMaster.globals.AccessToken = '{{ $.AccessToken.Token }}';
ResourcedMaster.globals.CurrentGraph = {
    ID: {{ $.CurrentGraph.ID }},
    ClusterID: {{ $.CurrentGraph.ClusterID }},
    Name: '{{ $.CurrentGraph.Name }}',
    Description: '{{ $.CurrentGraph.Description }}',
    Range: '{{ $.CurrentGraph.Range }}'
};

function updateChartsOrderServerSide() {
    var charts = [];

    var $container = $('.graphs-metrics-brick-layout');

    var graphID = $container.data('graph-id');

    $($container.packery('getItemElements')).each( function( i, itemElem ) {
        var $itemElem = $(itemElem);
        var chart = {
            ID: parseInt($itemElem.data('id'), 10),
            Key: $itemElem.data('key'),
            ClusterID: parseInt($itemElem.data('cluster-id'), 10)
        };

        charts.push(chart);
    });

    ResourcedMaster.globals.Charts = charts;

    $('#add-chart-modal form input[name="MetricsWithOrder"]').val(JSON.stringify(charts));

    ResourcedMaster.graphs.ajax(ResourcedMaster.globals.AccessToken, {
        method: 'PUT',
        id: graphID,
        metrics: true,
        data: ResourcedMaster.globals.Charts
    });
}

function execWhenAllChartsRendered(numCharts) {
    ResourcedMaster.globals.ChartsRendered.push(true);

    if(ResourcedMaster.globals.ChartsRendered.length >= numCharts) {
        // Begin Packery Layout and enable Draggabily
        var $container = $('.graphs-metrics-brick-layout');

        $container.packery({
            columnWidth: '.graphs-metrics-brick-layout .sizer',
            rowHeight: '.graphs-metrics-brick-layout .sizer',
            itemSelector: '.graphs-metrics-brick-layout .item',
            percentPosition: true
        });

        // get item elements, jQuery-ify them
        var $itemElems = $( $container.packery('getItemElements') );

        $itemElems.each( function( i, gridItem ) {
            var draggie = new Draggabilly( gridItem );
            $container.packery( 'bindDraggabillyEvents', draggie );
        });

        $container.off('dragItemPositioned').on('dragItemPositioned', updateChartsOrderServerSide);
        // -------------------------------------------
    }
}

function renderChartRange(numCharts, daterangepicker, from, to) {
    var elem = daterangepicker.closest('.panel-heading');
    var metricID = elem.data('id');
    var metricKey = elem.data('key');
    var containerDOM = elem.siblings('.panel-body');

    var renderOptions = {
        from: from,
        to: to,
        containerDOM: containerDOM,
        title: metricKey,
        onLoad: function() {
            execWhenAllChartsRendered(numCharts);
        }
    };

    if((to - from) >= 21600) {
        renderOptions.shortAggrInterval = '15min';
    }

    ResourcedMaster.metrics.renderOneChart(
        ResourcedMaster.globals.AccessToken,
        metricID,
        ResourcedMaster.globals.TSEventLines,
        ResourcedMaster.globals.TSEventLineColors,
        ResourcedMaster.globals.TSEventBands,
        ResourcedMaster.globals.TSEventBandColors,
        ResourcedMaster.globals.TSEventBandTextColors,
        renderOptions
    );
}

function renderAllChart() {
    $('.graphs-metrics-brick-layout .panel-heading').each(function() {
        var drpElem = $(this).find('.daterange');
        var drp = drpElem.data('daterangepicker');
        var from = drp.startDate.utc().unix();
        var to = drp.endDate.utc().unix();

        renderChartRange($('.graphs-metrics-brick-layout .panel-heading').length, drpElem, from, to);
    });
}

$(window).resize(function() {
    $('.graphs-metrics-brick-layout .panel-body').each(function() {
        $(this).highcharts().setSize(
            $(this).width(), ResourcedMaster.highcharts.defaultHeight, doAnimation = false
        );
    });
});

$(document).ready(function() {
    var currentGraphRangeSplit = ResourcedMaster.globals.CurrentGraph.Range.split(" ");
    var currentGraphRangeCount = parseInt(currentGraphRangeSplit[0], 10);
    var currentGraphRangeUnit = currentGraphRangeSplit[1];

    ResourcedMaster.metrics.getEventsLastXRange(currentGraphRangeCount, currentGraphRangeUnit, function(a1, a2) {
        $('input.daterange').each(function(index) {
            var drpElem = $(this);

            var settings = jQuery.extend(true, {}, ResourcedMaster.daterange.defaultSettings);
            settings.startDate = moment().subtract(currentGraphRangeCount, currentGraphRangeUnit);

            var graphPosition = drpElem.parent().parent().position();

            if(graphPosition.left < 360) {
                settings.opens = 'right';
            }

            drpElem.daterangepicker(settings, function(start, end, label) {
                var from = start.utc().unix();
                var to = end.utc().unix();
                renderChartRange($('input.daterange').length, drpElem, from, to);
            });
        });

        renderAllChart();
    });

    // Gather the ordering of every chart panels on load.
    ResourcedMaster.globals.Charts = $('.panel-chart').map(function() {
        return {
            ID: $(this).data('id'),
            Key: $(this).data('key'),
            ClusterID: ResourcedMaster.globals.CurrentGraph.ClusterID
        };
    }).get();
});

$('.graphs-select').change(function() {
    window.location = '/graphs/' + $(this).val();
});

$('#graph-lg-modal').on('shown.bs.modal', function (event) {
    var button = $(event.relatedTarget);   // Button that triggered the modal
    var metricID = button.data('metric-id');
    var metricKey = button.data('metric-key');

    var from = ResourcedMaster.daterange.defaultSettings.startDate.utc().unix();
    var to = ResourcedMaster.daterange.defaultSettings.endDate.utc().unix();

    var renderOptions = {
        'from': from,
        'to': to,
        'containerDOM': $('#graph-lg-modal .graph-lg-modal-container'),
        'title': metricKey
    };

    if((to - from) >= 21600) {
        renderOptions.shortAggrInterval = '15min';
    }

    ResourcedMaster.metrics.renderOneChart(
        ResourcedMaster.globals.AccessToken,
        metricID,
        ResourcedMaster.globals.TSEventLines,
        ResourcedMaster.globals.TSEventLineColors,
        ResourcedMaster.globals.TSEventBands,
        ResourcedMaster.globals.TSEventBandColors,
        ResourcedMaster.globals.TSEventBandTextColors,
        renderOptions
    );

});

$('#graph-lg-modal').on('show.bs.modal', function (event) {
    var button = $(event.relatedTarget);   // Button that triggered the modal
    var metricID = button.data('metric-id');
    var metricKey = button.data('metric-key');

    var modal = $(this);
    modal.data('metric-id', metricID);
    modal.data('metric-key', metricKey);

    var containerDOM = modal.find('.graph-lg-modal-container');

    var drpElem = modal.find('.daterange');

    drpElem.daterangepicker(ResourcedMaster.daterange.defaultSettings, function(start, end, label) {
        var from = start.utc().unix();
        var to = end.utc().unix();

        var renderOptions = {
            'from': from,
            'to': to,
            'containerDOM': containerDOM,
            'title': metricKey
        };

        if((to - from) >= 21600) {
            renderOptions.shortAggrInterval = '15min';
        }

        ResourcedMaster.metrics.renderOneChart(
            ResourcedMaster.globals.AccessToken,
            metricID,
            ResourcedMaster.globals.TSEventLines,
            ResourcedMaster.globals.TSEventLineColors,
            ResourcedMaster.globals.TSEventBands,
            ResourcedMaster.globals.TSEventBandColors,
            ResourcedMaster.globals.TSEventBandTextColors,
            renderOptions
        );
    });
});
</script>
{{end}}
