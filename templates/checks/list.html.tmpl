{{define "second-navbar"}}
{{ end }}

{{define "content"}}
<!-- Checks -->
<div class="container checks">
    {{ if eq (len .Metrics) 0 }}
    <div class="jumbotron" style="margin-top: 40px">
        <h2>Unable to create a check without metrics data</h2>
        <p>You can start collecting metrics by pressing <a class="btn btn-success btn-sm" href="/">Chart Metric?</a> button under Hosts tab.</p>
    </div>

    {{ else }}

    <div class="row">
        <div class="col-lg-12">
            <div class="page-header">
                <button class="btn btn-primary pull-right" data-toggle="modal" data-backdrop="static" data-target="#checks-modal">
                    New Check
                </button>

                <input id="search-input" name="q" type="text" class="form-control pull-right check-search-input" placeholder="Type to search" style="width: 400px" onkeyup="filter(this)">

                <h2>Checks</h2>
            </div>
        </div>
    </div>

    {{ range $check := .Checks }}
    <div class="row checks">
        <div class="col-xs-12 col-lg-12">
            <div class="pull-right">
                <div class="btn-group" role="group">
                    <button class="btn btn-default btn-xs" data-toggle="modal" data-target="#triggers-modal"
                        data-id="{{ $check.ID }}"
                        data-name="{{ $check.Name }}">
                        Triggers
                    </button>

                    <button class="btn btn-default btn-xs" data-toggle="modal" data-target="#checks-modal"
                        data-id="{{ $check.ID }}"
                        data-name="{{ $check.Name }}">
                        Edit
                    </button>
                </div>
            </div>

            <h4 style="margin-top: 0">{{ $check.Name }}</h4>
        </div>
    </div>
    {{ end }}

    {{ end }}
</div>

<!-- Checks Modal -->
<div class="modal fade" id="checks-modal" tabindex="-1" role="dialog" aria-labelledby="checks-details-label" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form method="post" action="/checks">
                <input type="hidden" name="gorilla.csrf.Token" value="{{ $.CSRFToken }}">
                <input type="hidden" name="_method" value="post">

                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="checks-details-label">1. Basic Check Info</h4>
                </div>

                <div class="modal-body">
                    <div class="row form-group">
                        <div class="col-sm-6">
                            <label>Name</label>
                            <input type="text" class="form-control" name="Name" value="">
                        </div>

                        <div class="col-sm-6">
                            <label>Interval</label>

                            <div class="input-group">
                                <input type="text" class="form-control" name="IntervalInSeconds" value="60">
                                <span class="input-group-addon">seconds</span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-header">
                    <h4 class="modal-title" id="checks-details-label">2. Hosts to Check</h4>
                </div>

                <div class="modal-body">
                    <div class="row form-group">
                        <div class="col-sm-12">
                            <label>Query for Hosts</label>
                            <div class="input-group">
                                <input type="text" class="form-control" name="HostsQuery">
                                <span class="input-group-btn">
                                    <button class="btn btn-info" type="button">Search</button>
                                </span>
                            </div>
                        </div>

                        <div class="col-sm-12">
                            <label>or, provide explicit hosts</label>
                            <textarea class="form-control" name="HostsList" row="10" placeholder="One host, one line"></textarea>
                        </div>
                    </div>
                </div>

                <div class="modal-header">
                    <h4 class="modal-title" id="checks-details-label">3. Check Expressions</h4>
                </div>

                <input type="hidden" name="Expressions" value="{}">

                <div class="expression-container">
                    <div class="modal-body expression">
                        <div class="row form-group">
                            <div class="col-sm-12">
                                <div class="btn-group btn-group-xs pull-right" role="group">
                                    <button type="button" class="btn btn-info btn-remove-expression">-</button>
                                    <button type="button" class="btn btn-info btn-add-expression">+</button>
                                </div>

                                Check

                                <select class="expression-type" name="ExpressionType">
                                    <option value="RawHostData">raw host data</option>
                                    <option value="RelativeHostData">relative host data</option>
                                    <option value="LogData">log data</option>
                                    <option value="Ping">ping</option>
                                    <option value="SSH">SSH</option>
                                    <option value="HTTP">HTTP</option>
                                </select>

                                <br>

                                <span class="expression-where">where</span>

                                <select class="expression-part expression-part-host-metrics">
                                    {{ range $metric := .Metrics }}
                                    <option value="{{ $metric.Key }}">{{ $metric.Key }}</option>
                                    {{ end }}
                                </select>

                                <span class="expression-part expression-part-raw-host">
                                    <select name="ExpressionOperator">
                                        <option value=">">></option>
                                        <option value=">">>=</option>
                                        <option value="=">=</option>
                                        <option value="<"><</option>
                                        <option value="<="><=</option>
                                    </select>

                                    <input name="ExpressionValue" type="number" style="width: 70px" value="1">
                                </span>

                                <span class="expression-part expression-part-relative-host" style="display: none">
                                    is <input name="ExpressionValue" type="number" style="width: 70px" value="200"> percent

                                    <select name="ExpressionOperator">
                                        <option value=">">greater than</option>
                                        <option value="<">less than</option>
                                    </select>

                                    <br>

                                    the previous <input name="ExpressionPrevRange" type="number" style="width: 70px" value="15"> minutes of

                                    <select name="ExpressionPrevAggr">
                                        <option value="avg">average</option>
                                        <option value="max">maximum</option>
                                        <option value="min">minimum</option>
                                        <option value="sum">sum</option>
                                    </select>

                                    host data
                                </span>

                                <span class="expression-part expression-part-log" style="display: none">
                                    the count of logline containing <input name="ExpressionSearch" type="text" placeholder="error">

                                    <br>

                                    is

                                    <select name="ExpressionOperator">
                                        <option value=">">greater than</option>
                                        <option value="<">less than</option>
                                    </select>

                                    <input name="ExpressionValue" type="number" style="width: 70px" value="1">

                                    <br>

                                    the last <input name="ExpressionPrevRange" type="number" style="width: 70px" value="15"> minutes
                                </span>

                                <span class="expression-part expression-part-ssh" style="display: none">
                                    the port is <input name="ExpressionPort" type="number" value="22"> and
                                </span>

                                <span class="expression-part expression-part-http" style="display: none">
                                    the port is <input name="ExpressionPort" type="number" value="80">

                                    &nbsp;using the following headers: <input name="ExpressionHeaders" type="text" style="width: 100%" placeholder="key=value,key=value">

                                    <br>

                                    or username: <input name="ExpressionUsername" type="text">

                                    <br>

                                    and password: <input name="ExpressionPassword" type="text">
                                </span>

                                <br class="expression-where">

                                affecting at minimum <input name="ExpressionMinHost" type="number" style="width: 70px" value="1"> hosts.
                            </div>
                        </div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-danger pull-left" data-dismiss="modal">
                        Delete
                    </button>

                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script type="text/template" id="expression-boolean-operator-tmpl">
    <div class="modal-header expression-boolean-operator">
        <select name="BooleanOperator">
            <option value="and">AND</option>
            <option value="or">OR</option>
        </select>
    </div>
</script>

<script>
function filter(element) {
    var value = $(element).val();
    if(value == '') {
        $('.row.checks').show();
    }
    else {
        value = value.toLowerCase();

        $('.row.checks').each(function() {
            var title = $(this).find('h4').text().toLowerCase().trim();
            var description = $(this).find('p').text().toLowerCase().trim();

            if(title.search(value) > -1 || description.search(value) > -1) {
                $(this).show();
            }
            else {
                $(this).hide();
            }
        });
    }
};

function buildExpressions() {
    var output = [];

    $('.expression-container').children().each(function() {
        var elem = $(this);
        var data = {};

        if(elem.hasClass('expression')) {
            data['Type'] = elem.find('select.expression-type').val();
            data['MinHost'] = elem.find('input[name="ExpressionMinHost"]').val();

            if(data['Type'] == 'RawHostData') {
                data['Metric'] = elem.find('select.expression-part-host-metrics').val();
                data['Operator'] = elem.find('.expression-part-raw-host select[name="ExpressionOperator"]').val();
                data['Value'] = elem.find('.expression-part-raw-host select[name="ExpressionValue"]').val();

            } else if(data['Type'] == 'RelativeHostData') {
                data['Metric'] = elem.find('select.expression-part-host-metrics').val();
                data['Operator'] = elem.find('.expression-part-relative-host select[name="ExpressionOperator"]').val();
                data['Value'] = elem.find('.expression-part-relative-host select[name="ExpressionValue"]').val();
                data['PrevRange'] = elem.find('.expression-part-relative-host input[name="ExpressionPrevRange"]').val();
                data['PrevAggr'] = elem.find('.expression-part-relative-host select[name="ExpressionPrevAggr"]').val();

            } else if(data['Type'] == 'LogData') {
                data['Search'] = elem.find('.expression-part-log input[name="ExpressionSearch"]').val();
                data['Operator'] = elem.find('.expression-part-log select[name="ExpressionOperator"]').val();
                data['Value'] = elem.find('.expression-part-log input[name="ExpressionValue"]').val();
                data['PrevRange'] = elem.find('.expression-part-log input[name="ExpressionPrevRange"]').val();

            } else if(data['Type'] == 'Ping') {

            } else if(data['Type'] == 'SSH') {
                data['Port'] = elem.find('.expression-part-ssh input[name="ExpressionPort"]').val();

            } else if(data['Type'] == 'HTTP') {
                data['Port'] = elem.find('.expression-part-http input[name="ExpressionPort"]').val();
                data['Headers'] = elem.find('.expression-part-http input[name="ExpressionHeaders"]').val();
                data['Username'] = elem.find('.expression-part-http input[name="ExpressionUsername"]').val();
                data['Password'] = elem.find('.expression-part-http input[name="ExpressionPassword"]').val();

            }

        } else if(elem.hasClass('expression-boolean-operator')) {
            data['Type'] = 'BooleanOperator';
            data['Operator'] = elem.find('select[name="BooleanOperator"]').val();
        }

        output.push(data);
    });

    return output;
}

$(document).ready(function() {
    if($('.row.checks').length == 0) {
        $('#search-input').hide();
    }
});

// Show or hide expression part appropriately
$(document).on('change', 'select.expression-type', function() {
    var expressionType = $(this).val();
    var expressionElem = $(this).closest('.expression');

    if(expressionType == 'RawHostData') {
        $(expressionElem).find('.expression-part').hide();
        $(expressionElem).find('.expression-where').show();
        $(expressionElem).find('.expression-part-host-metrics').show();
        $(expressionElem).find('.expression-part-raw-host').show();

    } else if(expressionType == 'RelativeHostData') {
        $(expressionElem).find('.expression-part').hide();
        $(expressionElem).find('.expression-where').show();
        $(expressionElem).find('.expression-part-host-metrics').show();
        $(expressionElem).find('.expression-part-relative-host').show();

    } else if(expressionType == 'LogData') {
        $(expressionElem).find('.expression-part').hide();
        $(expressionElem).find('.expression-where').show();
        $(expressionElem).find('.expression-part-log').show();

    } else if(expressionType == 'Ping') {
        $(expressionElem).find('.expression-part').hide();
        $(expressionElem).find('.expression-where').hide();

    } else if(expressionType == 'SSH') {
        $(expressionElem).find('.expression-part').hide();
        $(expressionElem).find('.expression-where').show();
        $(expressionElem).find('.expression-part-ssh').show();

    } else if(expressionType == 'HTTP') {
        $(expressionElem).find('.expression-part').hide();
        $(expressionElem).find('.expression-where').show();
        $(expressionElem).find('.expression-part-http').show();
    }
});

$(document).on('click', '.btn-remove-expression', function() {
    var expressionElem = $(this).closest('.expression');
    var booleanExpressionElem = expressionElem.prev('.expression-boolean-operator');

    if($('.expression').length > 1) {
        booleanExpressionElem.remove();
        expressionElem.remove();
    }
});

$(document).on('click', '.btn-add-expression', function() {
    $('.expression-container').append($('#expression-boolean-operator-tmpl').html());
    $('.expression-container').append('<div class="modal-body expression">' + $('.expression:first').html() + '</div>');

    console.log(buildExpressions());
});

$('#checks-modal form .btn-primary').click(function() {
    $('#checks-modal form input[name="_method"]').val('put');
    if($('input[name="Name"]').val() != '') {
        $(this).closest('form').submit();
    }
});

$('#checks-modal').on('show.bs.modal', function (event) {
    var button = $(event.relatedTarget);   // Button that triggered the modal
    var id = button.data('id');
    var name = button.data('name');
    var description = button.data('description');
    var range = button.data('range');

    var modal = $(this);

    if(name) {
        modal.find('input[name="Name"]').val(name);
    }
    if(description) {
        modal.find('textarea').val(description);
    }
    if(range) {
        modal.find('select[name="Range"]').val(range);
    }

    if(id) {
        modal.find('form').attr('action', '/checks/' + id);
        modal.find('.btn-danger').show();
    } else {
        modal.find('input[name="Name"]').val('');
        modal.find('textarea').val('');

        modal.find('form').attr('action', '/checks');
        modal.find('.btn-danger').hide();
    }
});
</script>
{{end}}
